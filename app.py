import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, ContentType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from db.service.orders import parse_order, create_order, update_order, get_order, delete_order, OrderModel

load_dotenv()

MONGO_URL = os.getenv("MONGO_URL")
DATABASE_NAME = os.getenv("DATABASE_NAME")

bot = Bot(token=os.getenv("DEV_BOT_TOKEN"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class PriceStates(StatesGroup):
    waiting_for_price = State()

def format_order(order: OrderModel, has_price_question: bool = False) -> str:
    formatted = (
        f"<b>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {order.date}, {order.time}</b>\n\n"
        f"üìç –û—Ç–∫—É–¥–∞: <blockquote>{order.from_location}</blockquote>\n"
        f"üìç –ö—É–¥–∞: <blockquote>{order.to_location}</blockquote>\n\n"
        f"üë§ –ò–º—è: {order.name}\n"
        f"<a href='tg://user?id={order.tg_id}'>ü§ñ Telegram-–ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞</a>\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n\n"
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í—Å–µ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤: <b>{order.adults + order.children}</b>\n"
        f"(–∏–∑ –Ω–∏—Ö –¥–æ 12 –ª–µ—Ç: <b>{order.children}</b>)"
    )

    if (order.price):
        formatted += f"\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{order.price}‚Ç¨</b>."
    
    if (not has_price_question):
        formatted += " –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–º —ç—Ç–∞ —Ü–µ–Ω–∞?"
    
    return formatted

def get_price_accept_buttons(order_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"accept_price:{order_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"decline_price:{order_id}")
        ]
    ])

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöó –ó–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä", web_app=WebAppInfo(url="https://" + os.getenv("WEBAPP_URL")))]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_price_button(order_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –î–∞—Ç—å —Ü–µ–Ω—É", callback_data=f"set_price:{order_id}")]
    ])

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ –±–æ—Ç —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Transsfera. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ò—Å–ø–∞–Ω–∏–∏: –ê–ª–∏–∫–∞–Ω—Ç–µ, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –í–∞–ª–µ–Ω—Å–∏—è.\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.",
        reply_markup=get_main_keyboard()
    )

@dp.message(PriceStates.waiting_for_price)
async def receive_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        return

    data = await state.get_data()
    order_id = data["order_id"]

    order = await update_order(order_id, {"price": price})

    formatted = format_order(order)
    await bot.send_message(
        order.tg_id,
        f"üöñ –í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{order.public_id}</b>\n\n{formatted}",
        reply_markup=get_price_accept_buttons(order_id)
    )

    await message.answer("‚úÖ –¶–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.")
    await state.clear()

@dp.callback_query(F.data.startswith("accept_price:"))
async def handle_accept_price(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]

    order = await update_order(order_id, {"accepted": True})
    if not order:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.edit_reply_markup()

    # –ö–ª–∏–µ–Ω—Ç—É
    await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    # –ê–¥–º–∏–Ω—É
    await bot.send_message(
        os.getenv("ADMIN_ID"),
        f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ <b>‚Ññ{order.public_id}</b>.\n\n"
        f"{format_order(order, True)}\n\n#–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã"
    )

    await callback.answer()

@dp.callback_query(F.data.startswith("decline_price:"))
async def handle_decline_price(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]

    await delete_order(order_id)

    await callback.message.edit_reply_markup()
    await callback.message.answer("üòî –°–ø–∞—Å–∏–±–æ! –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.")
    await callback.answer()

@dp.callback_query(F.data.startswith("set_price:"))
async def set_price_callback(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":")[1]
    order = await get_order(order_id)
    if order.price:
        await callback.message.answer(f"‚ùå –í—ã —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ü–µ–Ω—É –≤ <b>{order.price}‚Ç¨</b> –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!")
        await callback.answer()
        return
    await state.update_data(order_id=order_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞:")
    await state.set_state(PriceStates.waiting_for_price)
    await callback.answer()

@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def web_app_handler(message: Message):
    data = message.web_app_data.data
    parsed_order = parse_order(data, message.from_user.id)
    order_id = await create_order(parsed_order)
    await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ <b>‚Ññ{parsed_order.public_id}</b> –ø—Ä–∏–Ω—è—Ç! –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 5 –º–∏–Ω—É—Ç.")
    formatted = format_order(parsed_order, True)
    await bot.send_message(os.getenv("ADMIN_ID"), f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ <b>‚Ññ{parsed_order.public_id}</b>:\n\n{formatted}", reply_markup=get_price_button(order_id=str(order_id)), )

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user.")
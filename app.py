import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ContentType, CallbackQuery, FSInputFile
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

from db.service.orders import parse_order, create_order, update_order, get_order, delete_order
from utils import format_for_admin, format_for_client, convert_date
from keyboards import get_main_keyboard, get_price_accept_buttons, get_admin_buttons

load_dotenv()

MONGO_URL = os.getenv("MONGO_URL")
DATABASE_NAME = os.getenv("DATABASE_NAME")

bot = Bot(token=os.getenv("BOT_TOKEN"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class PriceStates(StatesGroup):
    waiting_for_price = State()

@dp.message(CommandStart())
async def start_handler(message: Message):
    photo_path = "assets/banner.jpg"
    caption = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{message.from_user.username}! –≠—Ç–æ –±–æ—Ç <b>Transsfera</b>. \n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –ø–æ –≤—Å–µ–º—É –ø–æ–±–µ—Ä–µ–∂—å—é <i>Costa Blanca</i>, "
        "–≤ —Ç–æ–º —á–∏—Å–ª–µ –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –ê–ª–∏–∫–∞–Ω—Ç–µ, –í–∞–ª–µ–Ω—Å–∏–∏ –∏ –ë–∞—Ä—Å–µ–ª–æ–Ω—ã ‚úàÔ∏è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ <b>–∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É</b> ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ü–µ–Ω—É –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏. "
        "–í–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ ‚úÖ –∏... –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–∏!"
    )
    logging.info(f"User {message.from_user.id} ({message.from_user.username}) opened the bot")
    await message.answer_photo(
        photo=FSInputFile(path=photo_path),
        caption=caption,
        reply_markup=get_main_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message(PriceStates.waiting_for_price)
async def receive_price(message: Message, state: FSMContext):
    try:
        price = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞\n\n‚å®Ô∏è  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    order_id = data.get("order_id")
    admin_message_id = data.get("admin_message_id")

    order = await update_order(order_id, {"price": price})
    if order is None:
        await message.answer("üîç  –£–ø—Å! –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    await bot.send_message(
        order.tg_id,
        f"üíé  –¶–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞! <b>#{order.public_id}</b>\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüí∞ <b>{price}‚Ç¨</b>\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüí°  <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑</b>, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞—à –≤–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
        reply_markup=get_price_accept_buttons(order_id)
    )

    if admin_message_id:
        try:
            formatted_admin = format_for_admin(
                order, 
                extra_info=f"\n\n‚è≥  –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞..."
            )
            await bot.edit_message_text(
                chat_id=os.getenv("ADMIN_ID"),
                message_id=admin_message_id,
                text=f"üéâ  –ó–ê–ö–ê–ó <b>#{order.public_id}</b> ‚Ä¢ –¶–ï–ù–ê –ù–ê–ó–ù–ê–ß–ï–ù–ê\n\n{formatted_admin}",
                reply_markup=None
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await message.answer(f"‚úÖ  –¶–µ–Ω–∞ {price}‚Ç¨ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É!")
    await state.clear()

@dp.callback_query(F.data.startswith("accept_price:"))
async def handle_accept_price(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]

    order = await update_order(order_id, {"accepted": True})
    if order is None:
        await callback.message.answer("üîç  –£–ø—Å! –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await callback.answer()
        return

    await callback.message.edit_reply_markup()

    # –ö–ª–∏–µ–Ω—Ç—É
    await callback.message.answer("üéâ  –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞\n\n‚è∞  –í–æ–¥–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\nüöó  –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!")

    # –ê–¥–º–∏–Ω—É
    formatted_admin = format_for_admin(order)
    await bot.send_message(
        os.getenv("ADMIN_ID"),
        f"üéä  –ü–û–î–¢–í–ï–†–ñ–î–Å–ù! <b>#{order.public_id}</b>\n\n‚úÖ  –ö–ª–∏–µ–Ω—Ç @{order.username} –ø—Ä–∏–Ω—è–ª —Ü–µ–Ω—É {order.price}‚Ç¨\n\n"
        f"{formatted_admin}\n\n#–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ_–∑–∞–∫–∞–∑—ã"
    )

    await callback.answer()

@dp.callback_query(F.data.startswith("decline_price:"))
async def handle_decline_price(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]

    order = await get_order(order_id)
    if not order:
        logging.warning(f"Order not found: {order_id}")
        await callback.message.answer("üîç  –£–ø—Å! –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await callback.answer()
        return

    await delete_order(order_id)
    await callback.message.edit_reply_markup()
    await callback.message.answer("üòî  –û—á–µ–Ω—å –∂–∞–ª—å! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –º—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.")
    await bot.send_message(os.getenv("ADMIN_ID"), f"üíî  –û—Ç–∫–∞–∑ –æ—Ç <b>#TR001</b>\n\n‚ùå  @{order.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ü–µ–Ω—É {order.price}‚Ç¨")
    await callback.answer()

@dp.callback_query(F.data.startswith("set_price:"))
async def set_price_callback(callback: CallbackQuery, state: FSMContext):
    order_id = callback.data.split(":")[1]

    order = await get_order(order_id)
    if not order:
        await callback.message.answer("üîç  –£–ø—Å! –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await callback.answer()
        return

    if order.price:
        await callback.message.answer(f"üí∞  –¶–µ–Ω–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n\n–î–ª—è –∑–∞–∫–∞–∑–∞ <b>{order.public_id}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ {order.price}‚Ç¨")
        await callback.answer()
        return
    
    await state.update_data(order_id=order_id, admin_message_id=callback.message.message_id)
    await callback.message.answer(f"üí∏  –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è <b>#{order.public_id}</b>\n\n‚å®Ô∏è  –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –µ–≤—Ä–æ:")
    await state.set_state(PriceStates.waiting_for_price)
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_decline:"))
async def handle_admin_decline(callback: CallbackQuery):
    order_id = callback.data.split(":")[1]
    
    order = await get_order(order_id)
    if not order:
        await callback.message.answer("üîç  –£–ø—Å! –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await callback.answer()
        return

    await delete_order(order_id)

    try:
        formatted_admin = format_for_admin(order)
        await bot.edit_message_text(
            chat_id=os.getenv("ADMIN_ID"),
            message_id=callback.message.message_id,
            text=f"üö´  –ó–ê–ö–ê–ó <b>#{order.public_id}</b> ‚Ä¢ –í–´ –û–¢–ö–õ–û–ù–ò–õ–ò\n\n{formatted_admin}",
            reply_markup=None
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await callback.message.answer(f"‚úÖ  –ó–∞–∫–∞–∑ <b>#{order.public_id}</b> –æ—Ç–∫–ª–æ–Ω—ë–Ω")

    await bot.send_message(
        order.tg_id,
        f"üö´  –ó–∞–∫–∞–∑ <b>#{order.public_id}</b>\n\nüòî  –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ <b>{convert_date(order.date)} ‚Ä¢ {order.time}</b> –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∑–∞–Ω—è—Ç—ã"
    )

    await callback.answer()

@dp.message(F.content_type == ContentType.WEB_APP_DATA)
async def web_app_handler(message: Message):
    data = message.web_app_data.data
    parsed_order = parse_order(data, message.from_user.id, message.from_user.username)
    order_id = await create_order(parsed_order)
    formatted_client = format_for_client(parsed_order)
    await message.answer(f"üéØ  –ó–∞–∫–∞–∑ <b>#{parsed_order.public_id}</b> –ø—Ä–∏–Ω—è—Ç!\n\n{formatted_client}\n\n‚è∞  –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å...\n–û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç")
    formatted_admin = format_for_admin(parsed_order)
    logging.info(f"New order {order_id}")
    await bot.send_message(os.getenv("ADMIN_ID"), f"üî•  –ù–û–í–´–ô –ó–ê–ö–ê–ó <b>#{parsed_order.public_id}</b>\n\n{formatted_admin}", reply_markup=get_admin_buttons(order_id=str(order_id)))

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user.")